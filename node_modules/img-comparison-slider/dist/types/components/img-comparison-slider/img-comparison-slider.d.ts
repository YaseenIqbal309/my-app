export interface Point {
  x: number;
  y: number;
}
export declare class ImgComparisonSlider {
  el: HTMLElement;
  private after?;
  private afterImageContainer?;
  private before?;
  private imageWidth;
  private exposure;
  private isMouseDown;
  private keyboardSlideAnimationTimeoutId;
  private animationRequestId;
  private transitionTimer;
  private isFocused;
  componentWillLoad(): void;
  componentDidRender(): void;
  disconnectedCallback(): void;
  slide(increment?: number, transition?: boolean): void;
  onKeyDown(e: KeyboardEvent): void;
  onKeyUp(e: KeyboardEvent): void;
  /**
   * This dynamic window.onmousemove event handler
   * registers on mousedown and removes on mouse up.
   * The whole mumbo-jumbo is needed to capture
   * mouse events outside of component. This provides
   * better user experience.
   */
  private onWindowMouseMove;
  private bodyUserSelectStyle;
  onMouseDown(e: MouseEvent): void;
  onMouseUp(e: MouseEvent | TouchEvent): void;
  touchStartPoint: Point;
  isTouchComparing: boolean;
  hasTouchMoved: boolean;
  onTouchStart(e: TouchEvent): void;
  onTouchMove(e: TouchEvent): boolean;
  touchEnd(): void;
  onBlur(): void;
  onFocus(): void;
  updateAfterWidth(): void;
  slideToPageX(pageX: number, transition?: boolean): void;
  private startSlideAnimation;
  private stopSlideAnimation;
  render(): any;
}
